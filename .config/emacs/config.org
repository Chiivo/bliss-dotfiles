* Package Manager
#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
(defvar bootstrap-version)
(let ((bootstrap-file
(expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
(bootstrap-version 6))
(unless (file-exists-p bootstrap-file)
(with-current-buffer
(url-retrieve-synchronously
"https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
'silent 'inhibit-cookies)
(goto-char (point-max))
(eval-print-last-sexp)))
(load bootstrap-file nil 'nomessage))
#+end_src

* Theme
#+begin_src emacs-lisp
(straight-use-package 'autothemer)
(load-theme 'bliss t) ; Load theme
#+end_src

* Garbage Collection
#+begin_src emacs-lisp
;; Using garbage magic hack.
(straight-use-package 'gcmh)
(gcmh-mode)
;; Setting garbage collection threshold
(setq gc-cons-threshold 402653184
gc-cons-percentage 0.6)
;; Profile emacs startup
(add-hook 'emacs-startup-hook(lambda()(message "*** Emacs loaded in %s with %d garbage collections."(format "%.2f seconds"(float-time(time-subtract after-init-time before-init-time)))gcs-done)))
;; Silence compiler warnings as they can be pretty disruptive
(setq comp-async-report-warnings-errors nil)
#+end_src

* Doom Modeline
#+begin_src emacs-lisp
(straight-use-package 'doom-modeline)
(require 'doom-modeline)
(doom-modeline-mode)
(setq doom-modeline-height 30)
(setq doom-modeline-buffer-file-name-style 'truncate-nil)
(setq doom-modeline-highlight-modified-buffer-name nil)
#+end_src

* Emacs Config
#+begin_src emacs-lisp
(setq inhibit-startup-message t ; don't show splash screen
visible-bell t ; flash bell on error
cursor-type 'bar ; change cursor type
mouse-autoselect-window t ; focus follows mouse
display-line-numbers-width-start t) ; calculate max num of line to keep line numbers from jiggling
(delete-selection-mode t) ; replace highlighted text when typing
(tool-bar-mode -1) ; button gui
(scroll-bar-mode -1) ; scrollbar
(menu-bar-mode -1) ; menu bar
(global-display-line-numbers-mode) ; numbers on the side
(global-visual-line-mode) ;wrap text 
#+end_src

* Dashboard
#+begin_src emacs-lisp
(straight-use-package 'dashboard)
(straight-use-package 'page-break-lines)
(straight-use-package 'projectile)
(straight-use-package 'all-the-icons)
(require 'dashboard)
(require 'all-the-icons)
(dashboard-setup-startup-hook)
(setq dashboard-banner-logo-title "Welcome to Emacs Dashboard") ;; set title
(setq dashboard-startup-banner 'logo) ;; Set the banner
;; Value can be
;; - nil to display no banner
;; - 'official which displays the official emacs logo
;; - 'logo which displays an alternative emacs logo
;; - 1, 2 or 3 which displays one of the text banners
;; - "path/to/your/image.gif", "path/to/your/image.png" or "path/to/your/text.txt" which displays whatever gif/image/text you would prefer
;; - a cons of '("path/to/your/image.png" . "path/to/your/text.txt")
(setq dashboard-center-content t) ;; center content
(setq dashboard-show-shortcuts nil) ;; show shortcuts
(setq dashboard-set-heading-icons t)
(setq dashboard-set-file-icons t)
(setq dashboard-items '((recents  . 5)
(bookmarks . 5)))
#+end_src

* Org Mode Config
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(setq org-src-fontify-natively t
org-src-tab-acts-natively t
org-confirm-babel-evaluate nil
org-src-preserve-indentation nil
org-edit-src-content-indentation 0)
(straight-use-package 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode)))
#+end_src

* Language Support
#+begin_src emacs-lisp
(straight-use-package 'lua-mode)
(straight-use-package 'markdown-mode)
#+end_src

* Evil
#+begin_src emacs-lisp
(straight-use-package 'evil)
(straight-use-package 'evil-collection)
(straight-use-package 'evil-commentary)
(straight-use-package 'evil-anzu)
(setq evil-want-keybinding nil)
(require 'evil)
(require 'evil-collection)
(require 'evil-commentary)
(with-eval-after-load 'evil
(require 'evil-anzu))
(evil-mode)
(setq evil-normal-state-cursor 'bar)
(evil-set-undo-system 'undo-redo)
(evil-commentary-mode)
#+end_src

* NeoTree
#+begin_src emacs-lisp
(straight-use-package 'neotree)
(setq neo-smart-open t)
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
#+end_src

* Which-Key
#+begin_src emacs-lisp
(straight-use-package 'which-key)
(require 'which-key)
(which-key-mode)
(setq which-key-allow-evil-operators t)
(setq which-key-show-operator-state-maps t)
(evil-define-key nil evil-normal-state-map
" t" '("NeoTree" . neotree-toggle)
"  " '("Reload Config" . (lambda() (interactive)(load-file "~/.config/emacs/init.el"))))
#+end_src

* Focus
#+begin_src emacs-lisp
(straight-use-package 'focus)
;; (require 'focus)
;; (focus-mode)
;; (add-to-list 'focus-mode-to-thing '(prog-mode . paragraph))
;; (add-to-list 'focus-mode-to-thing '(text-mode . paragraph))
#+end_src

* Centered-Cursor
#+begin_src emacs-lisp
(straight-use-package 'centered-cursor-mode)
(global-centered-cursor-mode)
#+end_src

* Rainbow-Mode
#+begin_src emacs-lisp
(straight-use-package 'rainbow-mode)
(rainbow-mode)
#+end_src

* Smartparens
#+begin_src emacs-lisp
(straight-use-package 'smartparens)
(require 'smartparens-config)
(smartparens-global-mode)
#+end_src

* WIP
#+begin_src emacs-lisp
;; (setq left-margin-width 1 right-margin-width 1) ; Define new widths.
;; (set-window-buffer nil (current-buffer)) ; Use them now.
#+end_src
