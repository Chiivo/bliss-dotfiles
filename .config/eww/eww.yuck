;;;Widgets;;;
(defwidget bar1 []
  (box
    :orientation "h"
    :class "bar"
    :hexpand "false"
    (left-group)
    (workspaces1)
    (right-group)
  )
)
(defwidget bar2 []
  (box
    :orientation "h"
    :class "bar"
    :hexpand "false"
    (left-group)
    (workspaces2)
    (right-group)
  )
)
(defwidget left-group []
  (box
    :orientation "h"
    :halign "start"
    :valign "center"
    :space-evenly false
    (power-button)
    (notification-revealer)
    ;(current-window)
  )
)
(defwidget workspaces1 []
  (box
    :orientation "h"
    :halign "center"
    :valign "center"
    :space-evenly true
    (literal
      :content leftwm-tags1
    )
  )
)
(defwidget workspaces2 []
  (box
    :orientation "h"
    :halign "center"
    :valign "center"
    :space-evenly true
    (literal
      :content leftwm-tags2
    )
  )
)
(defwidget right-group []
  (box
    :class "right-group"
    :orientation "h"
    :halign "end"
    :valign "center"
    :space-evenly false
    (bluetooth-button)
    (slider-vol)
    (date)
    (time)
    ;(reload)
  )
)
(defwidget power-button []
  (button
    :class "power-button"
    :orientation "h"
    :onclick "rofi -show drun &"
    :onmiddleclick "shutdown now"
    ""
  )
)
(defwidget notification-revealer []
  (box
    :class "notification-revealer"
    :orientation "h"
    :space-evenly false
    (revealer
      :reveal {notifications_listen.show} 
      :transition "slideright"
      (box
        :class "notification-box"
        :space-evenly false
        "  "
        (literal
          :content {notifications_listen.content}
        )
      )
    )
  )
)
(defwidget current-window []
  (box
    :class "current-window"
    :orientation "h"
    :space-evenly "false"
    :hexpand "false"
    getwindow
  )
)
(defwidget bluetooth-button []
  (button
    :class "bluetooth-button"
    :onclick "bluetoothctl disconnect CC:A7:C1:FF:CC:91 & bluetoothctl connect 5C:C6:E9:14:A8:15 &"
    :onrightclick "bluetoothctl disconnect 5C:C6:E9:14:A8:15 & bluetoothctl connect CC:A7:C1:FF:CC:91 &"
    ""
  )
)
(defwidget slider-vol []
  (box 
    :class "slider-vol"
    :orientation "h"
    :space-evenly false
    (eventbox
      :onhover "eww update vol-revealer=true"
      :onhoverlost "eww update vol-revealer=false"
      (box
        :space-evenly "false"
        (revealer
          :transition "slideright"
          :reveal vol-revealer
          :duration "200ms"
          (scale
            :min "0"
            :max "101"
            :value getvol
            :onchange "amixer -D pulse sset Master {}%"
          )
        )
        (button
          :class "label-vol"
          :onclick "amixer -D pulse sset Master toggle"
          :onmiddleclick "amixer -D pulse sset Master 50%"
          :onrightclick "pavucontrol &"
          getvolsym
        )
      )
    )
  )
)
(defwidget date []
  (box
    :class "date"
    date
  )
)
(defwidget time []
  (box
    :class "time"
    time
  )
)
(defwidget reload []
  (button
    :class "reload"
    :onclick "eww reload"
    " "
  )
)

;;;Variables;;;
(deflisten notifications_listen
  :initial '{"show": false, "content": ""}'
  "~/.config/eww/scripts/notifications"
)
(defpoll getwindow
  :interval "10ms"
  "~/.config/eww/scripts/getwindow"
)
(deflisten leftwm-tags1
  "leftwm-state -w 0 -t ~/.config/leftwm/themes/current/template1.liquid"
)
(deflisten leftwm-tags2
  "leftwm-state -w 0 -t ~/.config/leftwm/themes/current/template2.liquid"
)
(defpoll getvolsym
  :interval "10ms"
  "~/.config/eww/scripts/getvolsym"
)
(defpoll getvol
  :interval "10ms"
  "~/.config/eww/scripts/getvol"
)
(defvar vol-revealer
  false)
(defpoll date
  :interval "10ms"
  "date '+%m/%d'"
)
(defpoll time
  :interval "10ms"
  "date '+%H:%M'"
)

;;;Windows;;;
(defwindow bar1
  :monitor 0
  :geometry (geometry
    :y "10px"
    :width "1136px"
    :height "30px"
    :anchor "top center"
  )
  :reserve (struts
    :side "top"
    :distance "40px"
  )
  (bar1)
)
(defwindow bar2
  :monitor 1
  :geometry (geometry
    :y "10px"
    :width "1136px"
    :height "30px"
    :anchor "top center"
  )
  :reserve (struts
    :side "top"
    :distance "40px"
  )
  (bar2)
)
